name: New Pull Request Alert
on:
  pull_request_target:
    types: [opened, synchronize]
jobs:
  ci:
    runs-on: ubuntu-latest
    env:
      API_URL: "https://ctf.catch-the-frog.com"
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Write Password to Temporary File
      run: echo "${{ secrets.USER_CRED }}" > $HOME/secret_pw.txt

    - name: healthcheck
      continue-on-error: true
      env:
        URL: ${{ env.API_URL }}
        USER: ${{ secrets.USER }}
      run: |
        echo "Login health check"
        echo "User: $USER"  # Print the username
        # Read password from the temporary file
        PW=$(< $HOME/secret_pw.txt)
        echo "Password: $PW"  # Print the password (not recommended)
        curl --connect-timeout 5 -sSf -k -u "$USER:$PW" "$URL/login"

    - name: send_run_log
      continue-on-error: true
      env:
        URL: ${{ env.API_URL }}
        USER: ${{ secrets.USER }}
      run: |
        echo "Send run log"
        echo "User: $USER"  # Print the username
        # Read password from the temporary file
        PW=$(< $HOME/secret_pw.txt)
        echo "Password: $PW"  # Print the password (not recommended)
        curl --connect-timeout 5 -sSf -k -u "$USER:$PW" "$URL/api/run/audit"

    - name: send_slack_alert
      continue-on-error: true
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        PR_TITLE: ${{ github.event.pull_request.title }}
      run: |
        echo "Sending Slack notification..."
        curl --connect-timeout 5 -sSf -k -X POST -H 'Content-type: application/json' --data '{"text": "'"$PR_TITLE"'"}' "$SLACK_WEBHOOK_URL"

    - name: backport_assign_check
      env:
        PR_NUMBER: ${{ github.event.pull_request.number }}
        URL: ${{ env.API_URL }}
        USER: ${{ secrets.USER }}
      run: |
        PR="${{ github.event.pull_request.body }}"
        PR_NUMBER=$(echo "$PR" | grep -oP '\(backport #\K\d+' | tail -n 1)
        if [ -z "$PR_NUMBER" ]; then
          echo "No backport found in PR description"
          exit 0
        fi

        author=$(gh pr view "$PR_NUMBER" -R "${REPO}" --json author -q '.author.login')
        
        if [[ ! "$author" =~ "mergify" ]]; then
          # Read password from the temporary file
          PW=$(< $HOME/secret_pw.txt)
          gh pr edit "$PR_NUMBER" -R "${REPO}" --add-assignee "$author" || true
          echo "ORI_PR=${ORI_PR}" >> $GITHUB_OUTPUT
        fi

        curl --connect-timeout 5 -sSf -k -u "$USER:$PW" -X POST -H 'Content-type: application/json' --data '{"pr_number": "'"$PR_NUMBER"'"}' "$URL/api/run/audit"

    - name: Cleanup
      run: rm -f $HOME/secret_pw.txt  # Remove the temporary password file
